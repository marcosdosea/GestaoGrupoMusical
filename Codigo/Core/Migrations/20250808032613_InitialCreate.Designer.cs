// <auto-generated />
using System;
using Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(GrupoMusicalContext))]
    [Migration("20250808032613_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Core.Apresentacaotipoinstrumento", b =>
                {
                    b.Property<int>("IdApresentacao")
                        .HasColumnType("int")
                        .HasColumnName("idApresentacao");

                    b.Property<int>("IdTipoInstrumento")
                        .HasColumnType("int")
                        .HasColumnName("idTipoInstrumento");

                    b.Property<int>("QuantidadeConfirmada")
                        .HasColumnType("int")
                        .HasColumnName("quantidadeConfirmada");

                    b.Property<int>("QuantidadePlanejada")
                        .HasColumnType("int")
                        .HasColumnName("quantidadePlanejada");

                    b.Property<int>("QuantidadeSolicitada")
                        .HasColumnType("int")
                        .HasColumnName("quantidadeSolicitada");

                    b.HasKey("IdApresentacao", "IdTipoInstrumento")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdApresentacao" }, "fk_ApresentacaoTipoInstrumento_Apresentacao1_idx");

                    b.HasIndex(new[] { "IdTipoInstrumento" }, "fk_ApresentacaoTipoInstrumento_TipoInstrumento1_idx");

                    b.ToTable("apresentacaotipoinstrumento", (string)null);
                });

            modelBuilder.Entity("Core.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetroles", (string)null);
                });

            modelBuilder.Entity("Core.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("aspnetroleclaims", (string)null);
                });

            modelBuilder.Entity("Core.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<ulong>("EmailConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("LockoutEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<ulong>("PhoneNumberConfirmed")
                        .HasColumnType("bit(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<ulong>("TwoFactorEnabled")
                        .HasColumnType("bit(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("aspnetusers", (string)null);
                });

            modelBuilder.Entity("Core.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("aspnetuserclaims", (string)null);
                });

            modelBuilder.Entity("Core.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("aspnetuserlogins", (string)null);
                });

            modelBuilder.Entity("Core.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(767)
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY");

                    b.ToTable("aspnetusertokens", (string)null);
                });

            modelBuilder.Entity("Core.Ensaio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataHoraFim")
                        .HasColumnType("datetime")
                        .HasColumnName("dataHoraFim");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("dataHoraInicio");

                    b.Property<int>("IdColaboradorResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("idColaboradorResponsavel");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<string>("Local")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("local");

                    b.Property<sbyte>("PresencaObrigatoria")
                        .HasColumnType("tinyint")
                        .HasColumnName("presencaObrigatoria");

                    b.Property<string>("Repertorio")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("repertorio");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('FIXO','EXTRA')")
                        .HasColumnName("tipo")
                        .HasDefaultValueSql("'FIXO'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_Ensaio_GrupoMusical1_idx");

                    b.HasIndex(new[] { "IdColaboradorResponsavel" }, "fk_Ensaio_Pessoa1_idx");

                    b.ToTable("ensaio", (string)null);
                });

            modelBuilder.Entity("Core.Ensaiopessoa", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int")
                        .HasColumnName("idPessoa");

                    b.Property<int>("IdEnsaio")
                        .HasColumnType("int")
                        .HasColumnName("idEnsaio");

                    b.Property<int>("IdPapelGrupo")
                        .HasColumnType("int")
                        .HasColumnName("idPapelGrupo");

                    b.Property<sbyte>("JustificativaAceita")
                        .HasColumnType("tinyint")
                        .HasColumnName("justificativaAceita");

                    b.Property<string>("JustificativaFalta")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("justificativaFalta");

                    b.Property<sbyte>("Presente")
                        .HasColumnType("tinyint")
                        .HasColumnName("presente");

                    b.HasKey("IdPessoa", "IdEnsaio")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPapelGrupo" }, "fk_EnsaioPessoa_PapelGrupo1_idx");

                    b.HasIndex(new[] { "IdEnsaio" }, "fk_PessoaEnsaio_Ensaio1_idx");

                    b.HasIndex(new[] { "IdPessoa" }, "fk_PessoaEnsaio_Pessoa1_idx");

                    b.ToTable("ensaiopessoa", (string)null);
                });

            modelBuilder.Entity("Core.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataHoraFim")
                        .HasColumnType("datetime")
                        .HasColumnName("dataHoraFim");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("datetime")
                        .HasColumnName("dataHoraInicio");

                    b.Property<int>("IdColaboradorResponsavel")
                        .HasColumnType("int")
                        .HasColumnName("idColaboradorResponsavel");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<string>("Local")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("local");

                    b.Property<string>("Repertorio")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("repertorio");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_Ensaio_GrupoMusical1_idx")
                        .HasDatabaseName("fk_Ensaio_GrupoMusical1_idx1");

                    b.HasIndex(new[] { "IdColaboradorResponsavel" }, "fk_Ensaio_Pessoa1_idx")
                        .HasDatabaseName("fk_Ensaio_Pessoa1_idx1");

                    b.ToTable("evento", (string)null);
                });

            modelBuilder.Entity("Core.Eventopessoa", b =>
                {
                    b.Property<int>("IdEvento")
                        .HasColumnType("int")
                        .HasColumnName("idEvento");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int")
                        .HasColumnName("idPessoa");

                    b.Property<int>("IdPapelGrupoPapelGrupo")
                        .HasColumnType("int")
                        .HasColumnName("idPapelGrupoPapelGrupo");

                    b.Property<int>("IdTipoInstrumento")
                        .HasColumnType("int")
                        .HasColumnName("idTipoInstrumento");

                    b.Property<sbyte>("JustificativaAceita")
                        .HasColumnType("tinyint")
                        .HasColumnName("justificativaAceita");

                    b.Property<string>("JustificativaFalta")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("justificativaFalta");

                    b.Property<sbyte>("Presente")
                        .HasColumnType("tinyint")
                        .HasColumnName("presente");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('INSCRITO','DEFERIDO','INDEFERIDO')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'INSCRITO'");

                    b.HasKey("IdEvento", "IdPessoa")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEvento" }, "fk_ApresentacaoPessoa_Apresentacao1_idx");

                    b.HasIndex(new[] { "IdPessoa" }, "fk_ApresentacaoPessoa_Pessoa1_idx");

                    b.HasIndex(new[] { "IdTipoInstrumento" }, "fk_ApresentacaoPessoa_TipoInstrumento1_idx");

                    b.HasIndex(new[] { "IdPapelGrupoPapelGrupo" }, "fk_EventoPessoa_PapelGrupo1_idx");

                    b.ToTable("eventopessoa", (string)null);
                });

            modelBuilder.Entity("Core.Figurino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_Figurino_GrupoMusical1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("figurino", (string)null);
                });

            modelBuilder.Entity("Core.Figurinomanequim", b =>
                {
                    b.Property<int>("IdFigurino")
                        .HasColumnType("int")
                        .HasColumnName("idFigurino");

                    b.Property<int>("IdManequim")
                        .HasColumnType("int")
                        .HasColumnName("idManequim");

                    b.Property<int>("QuantidadeDescartada")
                        .HasColumnType("int")
                        .HasColumnName("quantidadeDescartada");

                    b.Property<int>("QuantidadeDisponivel")
                        .HasColumnType("int")
                        .HasColumnName("quantidadeDisponivel");

                    b.Property<int>("QuantidadeEntregue")
                        .HasColumnType("int")
                        .HasColumnName("quantidadeEntregue");

                    b.HasKey("IdFigurino", "IdManequim")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdFigurino" }, "fk_FigurinoManequim_Figurino1_idx");

                    b.HasIndex(new[] { "IdManequim" }, "fk_FigurinoManequim_Manequim1_idx");

                    b.ToTable("figurinomanequim", (string)null);
                });

            modelBuilder.Entity("Core.Grupomusical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Agencia")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("agencia");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Banco")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("banco");

                    b.Property<string>("Cep")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("ChavePix")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("chavePIX");

                    b.Property<string>("ChavePixtipo")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("chavePIXTipo");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'SE'")
                        .IsFixedLength();

                    b.Property<string>("Facebook")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("facebook");

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("instagram");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("NumeroContaBanco")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("numeroContaBanco");

                    b.Property<string>("Pais")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pais");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("razaoSocial");

                    b.Property<string>("Rua")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rua");

                    b.Property<string>("Telefone1")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone1");

                    b.Property<string>("Telefone2")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone2");

                    b.Property<string>("Youtube")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("youtube");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cnpj" }, "cnpj_UNIQUE")
                        .IsUnique();

                    b.ToTable("grupomusical", (string)null);
                });

            modelBuilder.Entity("Core.Informativo", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("data");

                    b.Property<sbyte>("EntregarAssociadosAtivos")
                        .HasColumnType("tinyint")
                        .HasColumnName("entregarAssociadosAtivos");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int")
                        .HasColumnName("idPessoa");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("mensagem");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_GrupoMusicalPessoa_GrupoMusical1_idx");

                    b.HasIndex(new[] { "IdPessoa" }, "fk_GrupoMusicalPessoa_Pessoa1_idx");

                    b.ToTable("informativo", (string)null);
                });

            modelBuilder.Entity("Core.Instrumentomusical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataAquisicao")
                        .HasColumnType("date")
                        .HasColumnName("dataAquisicao");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<int>("IdTipoInstrumento")
                        .HasColumnType("int")
                        .HasColumnName("idTipoInstrumento");

                    b.Property<string>("Patrimonio")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("patrimonio");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('DISPONIVEL','EMPRESTADO','DANIFICADO')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'DISPONIVEL'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_InstrumentoMusical_GrupoMusical1_idx");

                    b.HasIndex(new[] { "IdTipoInstrumento" }, "fk_InstrumentoMusical_TipoInstrumento1_idx");

                    b.ToTable("instrumentomusical", (string)null);
                });

            modelBuilder.Entity("Core.Manequim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descricao");

                    b.Property<string>("Tamanho")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("tamanho");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("manequim", (string)null);
                });

            modelBuilder.Entity("Core.Materialestudo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("data")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdColaborador")
                        .HasColumnType("int")
                        .HasColumnName("idColaborador");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("link");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_MaterialEstudo_GrupoMusical1_idx");

                    b.HasIndex(new[] { "IdColaborador" }, "fk_MaterialEstudo_Pessoa1_idx");

                    b.ToTable("materialestudo", (string)null);
                });

            modelBuilder.Entity("Core.Movimentacaofigurino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte>("ConfirmacaoRecebimento")
                        .HasColumnType("tinyint")
                        .HasColumnName("confirmacaoRecebimento");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("data");

                    b.Property<int>("IdAssociado")
                        .HasColumnType("int")
                        .HasColumnName("idAssociado");

                    b.Property<int>("IdColaborador")
                        .HasColumnType("int")
                        .HasColumnName("idColaborador");

                    b.Property<int>("IdFigurino")
                        .HasColumnType("int")
                        .HasColumnName("idFigurino");

                    b.Property<int>("IdManequim")
                        .HasColumnType("int")
                        .HasColumnName("idManequim");

                    b.Property<int>("Quantidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quantidade")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('DISPONIVEL','ENTREGUE','RECEBIDO','DANIFICADO','DEVOLVIDO')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'DISPONIVEL'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdFigurino" }, "fk_EntregarFigurino_Figurino1_idx");

                    b.HasIndex(new[] { "IdManequim" }, "fk_EntregarFigurino_Manequim1_idx");

                    b.HasIndex(new[] { "IdAssociado" }, "fk_EntregarFigurino_Pessoa1_idx");

                    b.HasIndex(new[] { "IdColaborador" }, "fk_EntregarFigurino_Pessoa2_idx");

                    b.ToTable("movimentacaofigurino", (string)null);
                });

            modelBuilder.Entity("Core.Movimentacaoinstrumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte>("ConfirmacaoAssociado")
                        .HasColumnType("tinyint")
                        .HasColumnName("confirmacaoAssociado");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime")
                        .HasColumnName("data");

                    b.Property<int>("IdAssociado")
                        .HasColumnType("int")
                        .HasColumnName("idAssociado");

                    b.Property<int>("IdColaborador")
                        .HasColumnType("int")
                        .HasColumnName("idColaborador");

                    b.Property<int>("IdInstrumentoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idInstrumentoMusical");

                    b.Property<string>("TipoMovimento")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('EMPRESTIMO','DEVOLUCAO')")
                        .HasColumnName("tipoMovimento")
                        .HasDefaultValueSql("'EMPRESTIMO'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdInstrumentoMusical" }, "fk_DevolverInstrumento_InstrumentoMusical1_idx");

                    b.HasIndex(new[] { "IdAssociado" }, "fk_DevolverInstrumento_Pessoa1_idx");

                    b.HasIndex(new[] { "IdColaborador" }, "fk_DevolverInstrumento_Pessoa2_idx");

                    b.ToTable("movimentacaoinstrumento", (string)null);
                });

            modelBuilder.Entity("Core.Papelgrupo", b =>
                {
                    b.Property<int>("IdPapelGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPapelGrupo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("IdPapelGrupo")
                        .HasName("PRIMARY");

                    b.ToTable("papelgrupo", (string)null);
                });

            modelBuilder.Entity("Core.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte>("Ativo")
                        .HasColumnType("tinyint")
                        .HasColumnName("ativo");

                    b.Property<string>("Bairro")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("cidade");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime?>("DataEntrada")
                        .HasColumnType("date")
                        .HasColumnName("dataEntrada");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date")
                        .HasColumnName("dataNascimento");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("date")
                        .HasColumnName("dataSaida");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'SE'")
                        .IsFixedLength();

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<int>("IdManequim")
                        .HasColumnType("int")
                        .HasColumnName("idManequim");

                    b.Property<int>("IdPapelGrupo")
                        .HasColumnType("int")
                        .HasColumnName("idPapelGrupo");

                    b.Property<sbyte>("IsentoPagamento")
                        .HasColumnType("tinyint")
                        .HasColumnName("isentoPagamento");

                    b.Property<string>("MotivoSaida")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("motivoSaida");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Rua")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rua");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('M','F')")
                        .HasColumnName("sexo")
                        .HasDefaultValueSql("'F'");

                    b.Property<string>("Telefone1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone1");

                    b.Property<string>("Telefone2")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefone2");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Cpf" }, "cpf_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_Pessoa_GrupoMusical1_idx");

                    b.HasIndex(new[] { "IdManequim" }, "fk_Pessoa_Manequim1_idx");

                    b.HasIndex(new[] { "IdPapelGrupo" }, "fk_Pessoa_PapelGrupoMusical1_idx");

                    b.ToTable("pessoa", (string)null);
                });

            modelBuilder.Entity("Core.Receitafinanceira", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("date")
                        .HasColumnName("dataFim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("dataInicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descricao");

                    b.Property<int>("IdGrupoMusical")
                        .HasColumnType("int")
                        .HasColumnName("idGrupoMusical");

                    b.Property<decimal>("Valor")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGrupoMusical" }, "fk_ReceitaFinanceira_GrupoMusical1_idx");

                    b.ToTable("receitafinanceira", (string)null);
                });

            modelBuilder.Entity("Core.Receitafinanceirapessoa", b =>
                {
                    b.Property<int>("IdReceitaFinanceira")
                        .HasColumnType("int")
                        .HasColumnName("idReceitaFinanceira");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("int")
                        .HasColumnName("idPessoa");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("datetime")
                        .HasColumnName("dataPagamento");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("observacoes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('ABERTO','ENVIADO','PAGO','ISENTO')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'ABERTO'");

                    b.Property<decimal>("Valor")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valor");

                    b.Property<decimal>("ValorPago")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("valorPago");

                    b.HasKey("IdReceitaFinanceira", "IdPessoa")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPessoa" }, "fk_ReceitaFinanceiraPessoa_Pessoa1_idx");

                    b.HasIndex(new[] { "IdReceitaFinanceira" }, "fk_ReceitaFinanceiraPessoa_ReceitaFinanceira1_idx");

                    b.ToTable("receitafinanceirapessoa", (string)null);
                });

            modelBuilder.Entity("Core.Tipoinstrumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nome");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipoinstrumento", (string)null);
                });

            modelBuilder.Entity("Figurinoapresentacao", b =>
                {
                    b.Property<int>("IdFigurino")
                        .HasColumnType("int")
                        .HasColumnName("idFigurino");

                    b.Property<int>("IdApresentacao")
                        .HasColumnType("int")
                        .HasColumnName("idApresentacao");

                    b.HasKey("IdFigurino", "IdApresentacao")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdApresentacao" }, "fk_FigurinoApresentacao_Apresentacao1_idx");

                    b.HasIndex(new[] { "IdFigurino" }, "fk_FigurinoApresentacao_Figurino1_idx");

                    b.ToTable("figurinoapresentacao", (string)null);
                });

            modelBuilder.Entity("Figurinoensaio", b =>
                {
                    b.Property<int>("IdFigurino")
                        .HasColumnType("int")
                        .HasColumnName("idFigurino");

                    b.Property<int>("IdEnsaio")
                        .HasColumnType("int")
                        .HasColumnName("idEnsaio");

                    b.HasKey("IdFigurino", "IdEnsaio")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEnsaio" }, "fk_FigurinoEnsaio_Ensaio1_idx");

                    b.HasIndex(new[] { "IdFigurino" }, "fk_FigurinoEnsaio_Figurino1_idx");

                    b.ToTable("figurinoensaio", (string)null);
                });

            modelBuilder.Entity("Pessoatipoinstrumento", b =>
                {
                    b.Property<int>("IdPessoa")
                        .HasColumnType("int")
                        .HasColumnName("idPessoa");

                    b.Property<int>("IdTipoInstrumento")
                        .HasColumnType("int")
                        .HasColumnName("idTipoInstrumento");

                    b.HasKey("IdPessoa", "IdTipoInstrumento")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPessoa" }, "fk_Pessoa_has_TipoInstrumento_Pessoa_idx");

                    b.HasIndex(new[] { "IdTipoInstrumento" }, "fk_Pessoa_has_TipoInstrumento_TipoInstrumento1_idx");

                    b.ToTable("pessoatipoinstrumento", (string)null);
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.HasOne("Core.Aspnetrole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("Core.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Core.Apresentacaotipoinstrumento", b =>
                {
                    b.HasOne("Core.Evento", "IdApresentacaoNavigation")
                        .WithMany("Apresentacaotipoinstrumentos")
                        .HasForeignKey("IdApresentacao")
                        .IsRequired()
                        .HasConstraintName("fk_ApresentacaoTipoInstrumento_Apresentacao1");

                    b.HasOne("Core.Tipoinstrumento", "IdTipoInstrumentoNavigation")
                        .WithMany("Apresentacaotipoinstrumentos")
                        .HasForeignKey("IdTipoInstrumento")
                        .IsRequired()
                        .HasConstraintName("fk_ApresentacaoTipoInstrumento_TipoInstrumento1");

                    b.Navigation("IdApresentacaoNavigation");

                    b.Navigation("IdTipoInstrumentoNavigation");
                });

            modelBuilder.Entity("Core.Aspnetroleclaim", b =>
                {
                    b.HasOne("Core.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Aspnetuserclaim", b =>
                {
                    b.HasOne("Core.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Aspnetuserlogin", b =>
                {
                    b.HasOne("Core.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Aspnetusertoken", b =>
                {
                    b.HasOne("Core.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Ensaio", b =>
                {
                    b.HasOne("Core.Pessoa", "IdColaboradorResponsavelNavigation")
                        .WithMany("Ensaios")
                        .HasForeignKey("IdColaboradorResponsavel")
                        .IsRequired()
                        .HasConstraintName("fk_Ensaio_Pessoa1");

                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Ensaios")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_Ensaio_GrupoMusical1");

                    b.Navigation("IdColaboradorResponsavelNavigation");

                    b.Navigation("IdGrupoMusicalNavigation");
                });

            modelBuilder.Entity("Core.Ensaiopessoa", b =>
                {
                    b.HasOne("Core.Ensaio", "IdEnsaioNavigation")
                        .WithMany("Ensaiopessoas")
                        .HasForeignKey("IdEnsaio")
                        .IsRequired()
                        .HasConstraintName("fk_PessoaEnsaio_Ensaio1");

                    b.HasOne("Core.Papelgrupo", "IdPapelGrupoNavigation")
                        .WithMany("Ensaiopessoas")
                        .HasForeignKey("IdPapelGrupo")
                        .IsRequired()
                        .HasConstraintName("fk_EnsaioPessoa_PapelGrupo1");

                    b.HasOne("Core.Pessoa", "IdPessoaNavigation")
                        .WithMany("Ensaiopessoas")
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("fk_PessoaEnsaio_Pessoa1");

                    b.Navigation("IdEnsaioNavigation");

                    b.Navigation("IdPapelGrupoNavigation");

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("Core.Evento", b =>
                {
                    b.HasOne("Core.Pessoa", "IdColaboradorResponsavelNavigation")
                        .WithMany("Eventos")
                        .HasForeignKey("IdColaboradorResponsavel")
                        .IsRequired()
                        .HasConstraintName("fk_Ensaio_Pessoa10");

                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Eventos")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_Ensaio_GrupoMusical10");

                    b.Navigation("IdColaboradorResponsavelNavigation");

                    b.Navigation("IdGrupoMusicalNavigation");
                });

            modelBuilder.Entity("Core.Eventopessoa", b =>
                {
                    b.HasOne("Core.Evento", "IdEventoNavigation")
                        .WithMany("Eventopessoas")
                        .HasForeignKey("IdEvento")
                        .IsRequired()
                        .HasConstraintName("fk_ApresentacaoPessoa_Apresentacao1");

                    b.HasOne("Core.Papelgrupo", "IdPapelGrupoPapelGrupoNavigation")
                        .WithMany("Eventopessoas")
                        .HasForeignKey("IdPapelGrupoPapelGrupo")
                        .IsRequired()
                        .HasConstraintName("fk_EventoPessoa_PapelGrupo1");

                    b.HasOne("Core.Pessoa", "IdPessoaNavigation")
                        .WithMany("Eventopessoas")
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("fk_ApresentacaoPessoa_Pessoa1");

                    b.HasOne("Core.Tipoinstrumento", "IdTipoInstrumentoNavigation")
                        .WithMany("Eventopessoas")
                        .HasForeignKey("IdTipoInstrumento")
                        .IsRequired()
                        .HasConstraintName("fk_ApresentacaoPessoa_TipoInstrumento1");

                    b.Navigation("IdEventoNavigation");

                    b.Navigation("IdPapelGrupoPapelGrupoNavigation");

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdTipoInstrumentoNavigation");
                });

            modelBuilder.Entity("Core.Figurino", b =>
                {
                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Figurinos")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_Figurino_GrupoMusical1");

                    b.Navigation("IdGrupoMusicalNavigation");
                });

            modelBuilder.Entity("Core.Figurinomanequim", b =>
                {
                    b.HasOne("Core.Figurino", "IdFigurinoNavigation")
                        .WithMany("Figurinomanequims")
                        .HasForeignKey("IdFigurino")
                        .IsRequired()
                        .HasConstraintName("fk_FigurinoManequim_Figurino1");

                    b.HasOne("Core.Manequim", "IdManequimNavigation")
                        .WithMany("Figurinomanequims")
                        .HasForeignKey("IdManequim")
                        .IsRequired()
                        .HasConstraintName("fk_FigurinoManequim_Manequim1");

                    b.Navigation("IdFigurinoNavigation");

                    b.Navigation("IdManequimNavigation");
                });

            modelBuilder.Entity("Core.Informativo", b =>
                {
                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Informativos")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_GrupoMusicalPessoa_GrupoMusical1");

                    b.HasOne("Core.Pessoa", "IdPessoaNavigation")
                        .WithMany("Informativos")
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("fk_GrupoMusicalPessoa_Pessoa1");

                    b.Navigation("IdGrupoMusicalNavigation");

                    b.Navigation("IdPessoaNavigation");
                });

            modelBuilder.Entity("Core.Instrumentomusical", b =>
                {
                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Instrumentomusicals")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_InstrumentoMusical_GrupoMusical1");

                    b.HasOne("Core.Tipoinstrumento", "IdTipoInstrumentoNavigation")
                        .WithMany("Instrumentomusicals")
                        .HasForeignKey("IdTipoInstrumento")
                        .IsRequired()
                        .HasConstraintName("fk_InstrumentoMusical_TipoInstrumento1");

                    b.Navigation("IdGrupoMusicalNavigation");

                    b.Navigation("IdTipoInstrumentoNavigation");
                });

            modelBuilder.Entity("Core.Materialestudo", b =>
                {
                    b.HasOne("Core.Pessoa", "IdColaboradorNavigation")
                        .WithMany("Materialestudos")
                        .HasForeignKey("IdColaborador")
                        .IsRequired()
                        .HasConstraintName("fk_MaterialEstudo_Pessoa1");

                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Materialestudos")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_MaterialEstudo_GrupoMusical1");

                    b.Navigation("IdColaboradorNavigation");

                    b.Navigation("IdGrupoMusicalNavigation");
                });

            modelBuilder.Entity("Core.Movimentacaofigurino", b =>
                {
                    b.HasOne("Core.Pessoa", "IdAssociadoNavigation")
                        .WithMany("MovimentacaofigurinoIdAssociadoNavigations")
                        .HasForeignKey("IdAssociado")
                        .IsRequired()
                        .HasConstraintName("fk_EntregarFigurino_Pessoa1");

                    b.HasOne("Core.Pessoa", "IdColaboradorNavigation")
                        .WithMany("MovimentacaofigurinoIdColaboradorNavigations")
                        .HasForeignKey("IdColaborador")
                        .IsRequired()
                        .HasConstraintName("fk_EntregarFigurino_Pessoa2");

                    b.HasOne("Core.Figurino", "IdFigurinoNavigation")
                        .WithMany("Movimentacaofigurinos")
                        .HasForeignKey("IdFigurino")
                        .IsRequired()
                        .HasConstraintName("fk_EntregarFigurino_Figurino1");

                    b.HasOne("Core.Manequim", "IdManequimNavigation")
                        .WithMany("Movimentacaofigurinos")
                        .HasForeignKey("IdManequim")
                        .IsRequired()
                        .HasConstraintName("fk_EntregarFigurino_Manequim1");

                    b.Navigation("IdAssociadoNavigation");

                    b.Navigation("IdColaboradorNavigation");

                    b.Navigation("IdFigurinoNavigation");

                    b.Navigation("IdManequimNavigation");
                });

            modelBuilder.Entity("Core.Movimentacaoinstrumento", b =>
                {
                    b.HasOne("Core.Pessoa", "IdAssociadoNavigation")
                        .WithMany("MovimentacaoinstrumentoIdAssociadoNavigations")
                        .HasForeignKey("IdAssociado")
                        .IsRequired()
                        .HasConstraintName("fk_DevolverInstrumento_Pessoa1");

                    b.HasOne("Core.Pessoa", "IdColaboradorNavigation")
                        .WithMany("MovimentacaoinstrumentoIdColaboradorNavigations")
                        .HasForeignKey("IdColaborador")
                        .IsRequired()
                        .HasConstraintName("fk_DevolverInstrumento_Pessoa2");

                    b.HasOne("Core.Instrumentomusical", "IdInstrumentoMusicalNavigation")
                        .WithMany("Movimentacaoinstrumentos")
                        .HasForeignKey("IdInstrumentoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_DevolverInstrumento_InstrumentoMusical1");

                    b.Navigation("IdAssociadoNavigation");

                    b.Navigation("IdColaboradorNavigation");

                    b.Navigation("IdInstrumentoMusicalNavigation");
                });

            modelBuilder.Entity("Core.Pessoa", b =>
                {
                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Pessoas")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_Pessoa_GrupoMusical1");

                    b.HasOne("Core.Manequim", "IdManequimNavigation")
                        .WithMany("Pessoas")
                        .HasForeignKey("IdManequim")
                        .IsRequired()
                        .HasConstraintName("fk_Pessoa_Manequim1");

                    b.HasOne("Core.Papelgrupo", "IdPapelGrupoNavigation")
                        .WithMany("Pessoas")
                        .HasForeignKey("IdPapelGrupo")
                        .IsRequired()
                        .HasConstraintName("fk_Pessoa_PapelGrupoMusical1");

                    b.Navigation("IdGrupoMusicalNavigation");

                    b.Navigation("IdManequimNavigation");

                    b.Navigation("IdPapelGrupoNavigation");
                });

            modelBuilder.Entity("Core.Receitafinanceira", b =>
                {
                    b.HasOne("Core.Grupomusical", "IdGrupoMusicalNavigation")
                        .WithMany("Receitafinanceiras")
                        .HasForeignKey("IdGrupoMusical")
                        .IsRequired()
                        .HasConstraintName("fk_ReceitaFinanceira_GrupoMusical1");

                    b.Navigation("IdGrupoMusicalNavigation");
                });

            modelBuilder.Entity("Core.Receitafinanceirapessoa", b =>
                {
                    b.HasOne("Core.Pessoa", "IdPessoaNavigation")
                        .WithMany("Receitafinanceirapessoas")
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("fk_ReceitaFinanceiraPessoa_Pessoa1");

                    b.HasOne("Core.Receitafinanceira", "IdReceitaFinanceiraNavigation")
                        .WithMany("Receitafinanceirapessoas")
                        .HasForeignKey("IdReceitaFinanceira")
                        .IsRequired()
                        .HasConstraintName("fk_ReceitaFinanceiraPessoa_ReceitaFinanceira1");

                    b.Navigation("IdPessoaNavigation");

                    b.Navigation("IdReceitaFinanceiraNavigation");
                });

            modelBuilder.Entity("Figurinoapresentacao", b =>
                {
                    b.HasOne("Core.Evento", null)
                        .WithMany()
                        .HasForeignKey("IdApresentacao")
                        .IsRequired()
                        .HasConstraintName("fk_FigurinoApresentacao_Apresentacao1");

                    b.HasOne("Core.Figurino", null)
                        .WithMany()
                        .HasForeignKey("IdFigurino")
                        .IsRequired()
                        .HasConstraintName("fk_FigurinoApresentacao_Figurino1");
                });

            modelBuilder.Entity("Figurinoensaio", b =>
                {
                    b.HasOne("Core.Ensaio", null)
                        .WithMany()
                        .HasForeignKey("IdEnsaio")
                        .IsRequired()
                        .HasConstraintName("fk_FigurinoEnsaio_Ensaio1");

                    b.HasOne("Core.Figurino", null)
                        .WithMany()
                        .HasForeignKey("IdFigurino")
                        .IsRequired()
                        .HasConstraintName("fk_FigurinoEnsaio_Figurino1");
                });

            modelBuilder.Entity("Pessoatipoinstrumento", b =>
                {
                    b.HasOne("Core.Pessoa", null)
                        .WithMany()
                        .HasForeignKey("IdPessoa")
                        .IsRequired()
                        .HasConstraintName("fk_Pessoa_has_TipoInstrumento_Pessoa");

                    b.HasOne("Core.Tipoinstrumento", null)
                        .WithMany()
                        .HasForeignKey("IdTipoInstrumento")
                        .IsRequired()
                        .HasConstraintName("fk_Pessoa_has_TipoInstrumento_TipoInstrumento1");
                });

            modelBuilder.Entity("Core.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");
                });

            modelBuilder.Entity("Core.Aspnetuser", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetusertokens");
                });

            modelBuilder.Entity("Core.Ensaio", b =>
                {
                    b.Navigation("Ensaiopessoas");
                });

            modelBuilder.Entity("Core.Evento", b =>
                {
                    b.Navigation("Apresentacaotipoinstrumentos");

                    b.Navigation("Eventopessoas");
                });

            modelBuilder.Entity("Core.Figurino", b =>
                {
                    b.Navigation("Figurinomanequims");

                    b.Navigation("Movimentacaofigurinos");
                });

            modelBuilder.Entity("Core.Grupomusical", b =>
                {
                    b.Navigation("Ensaios");

                    b.Navigation("Eventos");

                    b.Navigation("Figurinos");

                    b.Navigation("Informativos");

                    b.Navigation("Instrumentomusicals");

                    b.Navigation("Materialestudos");

                    b.Navigation("Pessoas");

                    b.Navigation("Receitafinanceiras");
                });

            modelBuilder.Entity("Core.Instrumentomusical", b =>
                {
                    b.Navigation("Movimentacaoinstrumentos");
                });

            modelBuilder.Entity("Core.Manequim", b =>
                {
                    b.Navigation("Figurinomanequims");

                    b.Navigation("Movimentacaofigurinos");

                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Core.Papelgrupo", b =>
                {
                    b.Navigation("Ensaiopessoas");

                    b.Navigation("Eventopessoas");

                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Core.Pessoa", b =>
                {
                    b.Navigation("Ensaiopessoas");

                    b.Navigation("Ensaios");

                    b.Navigation("Eventopessoas");

                    b.Navigation("Eventos");

                    b.Navigation("Informativos");

                    b.Navigation("Materialestudos");

                    b.Navigation("MovimentacaofigurinoIdAssociadoNavigations");

                    b.Navigation("MovimentacaofigurinoIdColaboradorNavigations");

                    b.Navigation("MovimentacaoinstrumentoIdAssociadoNavigations");

                    b.Navigation("MovimentacaoinstrumentoIdColaboradorNavigations");

                    b.Navigation("Receitafinanceirapessoas");
                });

            modelBuilder.Entity("Core.Receitafinanceira", b =>
                {
                    b.Navigation("Receitafinanceirapessoas");
                });

            modelBuilder.Entity("Core.Tipoinstrumento", b =>
                {
                    b.Navigation("Apresentacaotipoinstrumentos");

                    b.Navigation("Eventopessoas");

                    b.Navigation("Instrumentomusicals");
                });
#pragma warning restore 612, 618
        }
    }
}
